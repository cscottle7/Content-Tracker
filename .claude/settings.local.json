{
  "permissions": {
    "allow": [
      "WebSearch",
      "Read(//c/Users/cscot/.claude/agents/**)",
      "Bash(for file in C:/Users/cscot/.claude/agents/*.md)",
      "Bash(do grep -q \"^model:\" \"$file\")",
      "Bash(done)",
      "Bash(powershell -Command \".\\Update-ClaudeAgents.ps1 -Action Validate\")",
      "Bash(powershell -Command \".\\Update-ClaudeAgents.ps1 -Action Tier2\")",
      "Bash(powershell -Command \".\\Update-ClaudeAgents.ps1 -Action Tier2 -DryRun\")",
      "Bash(powershell -Command \".\\Update-ClaudeAgents.ps1 -Action All -DryRun\")",
      "Bash(powershell -ExecutionPolicy Bypass -File \".\\Fix-RemainingAgents.ps1\")",
      "Bash(tree -L 3 -a)",
      "WebFetch(domain:www.anthropic.com)",
      "Bash(powershell -Command \"Get-Content ''C:\\Users\\cscot\\.claude\\agents\\threat-modeler.md'' | Select-String -Pattern ''^model:'' -Context 0,2\")",
      "Bash(powershell -Command \"if (Test-Path ''C:\\Users\\cscot\\.claude\\agents\\design-system-reviewer.md'') { Get-Content ''C:\\Users\\cscot\\.claude\\agents\\design-system-reviewer.md'' | Select-String -Pattern ''^model:'' -Context 0,2 } else { Write-Output ''File not found'' }\")",
      "Bash(powershell -Command \"if (Test-Path ''C:\\Users\\cscot\\.claude\\agents\\research-strategist.md'') { Get-Content ''C:\\Users\\cscot\\.claude\\agents\\research-strategist.md'' | Select-String -Pattern ''^model:|^name:|^description:'' } else { Write-Output ''File not found'' }\")",
      "Bash(powershell -Command \"if (Test-Path ''.claude\\skills\\foundation'') { Get-ChildItem ''.claude\\skills\\foundation'' -Directory | Select-Object Name } else { Write-Output ''Skills foundation directory not found'' }\")",
      "Bash(powershell -Command \"if (Test-Path ''.claude\\skills'') { Get-ChildItem ''.claude\\skills'' -Recurse -Filter ''*.md'' | Select-Object FullName } else { Write-Output ''Skills directory not found'' }\")",
      "Bash(powershell -Command \"Get-ChildItem ''.claude\\skills'' -Recurse | Format-Table Name, PSIsContainer, FullName\")",
      "Bash(powershell:*)",
      "Bash(cat:*)",
      "Bash(/bashes)",
      "Bash(npm install:*)",
      "Bash(npx:*)",
      "Bash(claude mcp add:*)",
      "Bash(mkdir:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nPhase 1: Project Foundation & Development Environment\n\nInitialize Content Tracking System with complete foundation:\n\nBackend (FastAPI):\n- Application structure with main.py, config.py\n- Pydantic models for content and users\n- Database initialization with SQLite + FTS5\n- Docker configuration with multi-stage build\n- Testing infrastructure with pytest\n- Requirements.txt with all dependencies\n\nFrontend (Next.js 14 + TypeScript):\n- App Router structure with layout and home page\n- TypeScript configuration with strict mode\n- Tailwind CSS with shadcn/ui setup\n- API client with typed endpoints\n- Utility functions and type definitions\n- Docker configuration for containerization\n\nInfrastructure:\n- Docker Compose orchestration for both services\n- Shared volumes for content_library and data\n- Environment configuration templates\n- Complete directory structure per CLAUDE.md\n\nDocumentation:\n- SETUP.md with installation instructions\n- DEVELOPMENT.md with developer guide\n- README.md with project overview\n- .env.example with all configuration options\n\nTesting:\n- Backend: pytest configuration with fixtures\n- Frontend: Jest configuration placeholder\n- Test coverage reporting setup\n\nGenerated with Claude Code\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(tree:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(python -m pytest tests/test_markdown_service.py -v)",
      "Bash(python -m pytest tests/test_content_api.py -v)",
      "Bash(docker-compose:*)",
      "Bash(python:*)",
      "Bash(sqlite3:*)",
      "Bash(uvicorn:*)",
      "Bash(pip install:*)",
      "Bash(/dev/null)",
      "Bash(pip --version)"
    ],
    "deny": [],
    "ask": []
  }
}